name: Publish package to the Maven Central Repository
# Controls when the action will run. 
on:
  release:
    types: [created]
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2
      - name: Set up Maven Central Repository
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      # Sets up python3
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Get the version
        id: get_version
        run: | 
          echo ::set-output name=TAG_VERSION::$(echo ${GITHUB_REF##*/} | cut -d - -f 2)
          echo ::set-output name=AVI_VERSION::$(python ./python/version.py)
          JAVA_VERSION=${{ steps.get_version.outputs.TAG_VERSION }}
          if [[ "$JAVA_VERSION" == *"post"* ]]; then
            echo "Java version post"
            JAVA_VERSION="${JAVA_VERSION/post/\.}"
          elif  [[ "$JAVA_VERSION" == *"b"* ]]; then
            echo "Java version beta:"
            JAVA_VERSION="${JAVA_VERSION/b/-beta-}"
          else
            echo "Java version Release"
            JAVA_VERSION=$JAVA_VERSION.RELEASE
          fi
          echo "Java version: $JAVA_VERSION"
          JAVA_VERSION="20.1.4-SNAPSHOT"
          echo ::set-output name=JAVA_VERSION::$(JAVA_VERSION)

      - name: Publish JAVA
        run: |
          cd java
          mvn versions:set -DnewVersion=${{ steps.get_version.outputs.JAVA_VERSION }}
          mvn clean --batch-mode deploy -DskipTests -Dgpg.passphrase=${{ secrets.AVISDK_PGP_PASSPHRASE }} -Denv.MAVEN_USERNAME=${{ secrets.OSSRH_USERNAME }} -Denv.MAVEN_PASSWORD=${{ secrets.OSSRH_TOKEN }}
          cd ..
          cp java/target/avisdk-${{ steps.get_version.outputs.JAVA_VERSION }}.jar .
          cp java/target/avisdk-${{ steps.get_version.outputs.JAVA_VERSION }}-javadoc.jar .

      # Installs and upgrades pip, installs other dependencies and installs the package from setup.py
      - name: "Installs and upgrades pip, installs other dependencies and installs the package from setup.py"
        run: |
          AVI_VERSION=`python ./python/version.py`
          # Upgrade pip
          python3 -m pip install --upgrade pip
          # Install build deps
          python3 -m pip install setuptools wheel twine
          # If requirements.txt exists, install from it
          cd python
          ./create_sdk_pip_packages.sh sdk
          ./create_sdk_pip_packages.sh migrationtools
          #./create_sdk_pypi.sh sdk
          echo "AVI VERSION=== $AVI_VERSION"
          ls dist/
          mv dist/avimigrationtools-21.1.1b1.tar.gz ../avimigrationtools-21.1.1b1.tar.gz
          echo "Java Version: " 
          echo ${GITHUB_REF##*/} | cut -d - -f 2
          #mv dist/avimigrationtools-$AVI_VERSION.tar.gz ../avimigrationtools-$AVI_VERSION.tar.gz
          #mv dist/avisdk-$AVI_VERSION.tar.gz ../avisdk-$AVI_VERSION.tar.gz
          #mv dist/python-avisdk_0_all.deb ../avisdk-$AVI_VERSION.deb
          #mv dist/avisdk-$AVI_VERSION-1.noarch.rpm ../avisdk-$AVI_VERSION.rpm
          #mv dist/avimigrationtools-$AVI_VERSION.tar.gz ../avimigrationtools-$AVI_VERSION.tar.gz
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_TEST_TOKEN }}
          TWINE_REPOSITORY: testpypi

      - name: update release
        id: update_release
        uses: tubone24/update_release@v1.0
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload Avi API SDK pip package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          upload_url: ${{ steps.update_release.outputs.upload_url }}
          asset_path: avisdk-${{ steps.get_version.outputs.AVI_VERSION }}.tar.gz
          asset_name: pip-package-avisdk-${{ steps.get_version.outputs.AVI_VERSION }}
          asset_content_type: application/gzip
      
      - name: Upload Avi Migration Tools pip package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          upload_url: ${{ steps.update_release.outputs.upload_url }}
          asset_path: avimigrationtools-${{ steps.get_version.outputs.AVI_VERSION }}.tar.gz
          asset_name: pip-package-avimigrationtools-${{ steps.get_version.outputs.AVI_VERSION }}
          asset_content_type: application/gzip
        
      - name: Upload Avi API SDK debian package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          upload_url: ${{ steps.update_release.outputs.upload_url }}
          asset_path: avisdk-${{ steps.get_version.outputs.AVI_VERSION }}.deb
          asset_name: debian-package-avisdk-${{ steps.get_version.outputs.AVI_VERSION }}
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Avi API SDK rpm package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          upload_url: ${{ steps.update_release.outputs.upload_url }}
          asset_path: avisdk-${{ steps.get_version.outputs.AVI_VERSION }}.rpm
          asset_name: rpm--package-avisdk-${{ steps.get_version.outputs.AVI_VERSION }}
          asset_content_type: application/x-rpm
      
      - name: Upload Avi API SDK Java package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          upload_url: ${{ steps.update_release.outputs.upload_url }}
          asset_path: avisdk-${{ steps.get_version.outputs.JAVA_VERSION }}.jar
          asset_name: jar-Java-avisdk-${{ steps.get_version.outputs.JAVA_VERSION }}
          asset_content_type: application/java-archive

      - name: Upload Avi API SDK Javadoc package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          upload_url: ${{ steps.update_release.outputs.upload_url }}
          asset_path: avisdk-${{ steps.get_version.outputs.JAVA_VERSION }}.jar
          asset_name: jar-java-avisdk-${{ steps.get_version.outputs.JAVA_VERSION }}
          asset_content_type: application/java-archive

